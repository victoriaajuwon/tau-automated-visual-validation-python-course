Is the starting point of the conftest, latest in conftest.py
import pytest
from applitools.common import MatchLevel
from applitools.selenium import Eyes
from selenium import webdriver

from config.base import APPLITOOLS_API_KEYS

# APP information for search_test
# APP_NAME = 'automation_bookstore'
# APP_UNDER_TEST = 'https://automationbookstore.dev/'

# APP information for dynamic_content_test
# APP_NAME = 'the-internet'
# APP_UNDER_TEST = 'https://the-internet.herokuapp.com/dynamic_content'

# APP information for full_page_screenshot_test
# APP_NAME = 'the-internet'
# APP_UNDER_TEST = 'https://the-internet.herokuapp.com/large'

# APP information for check_region_test
# APP_NAME = 'automation_bookstore'
# APP_UNDER_TEST = 'https://automationbookstore.dev/'

# APP information for check_region_in_frame_test
APP_NAME = 'the-internet'
APP_UNDER_TEST = 'https://the-internet.herokuapp.com/iframe'


@pytest.fixture(scope='function')
def driver():
    driver = webdriver.Chrome()
    driver.get(APP_UNDER_TEST)
    yield driver
    driver.quit()


@pytest.fixture(scope='function')
def eyes():
    eyes = initialize_eyes()
    yield eyes


def initialize_eyes():
    eyes = Eyes()
    eyes.api_key = APPLITOOLS_API_KEYS
    return eyes


# without match level,for search test
# def validate_window(driver, eyes, tag):
#     open_eyes(driver, eyes)
#     eyes.check_window(tag=tag)
#     close_eyes(eyes)


# with match level,for dynamic-content test
# def validate_window(driver, eyes, tag):
#     open_eyes(driver, eyes)
#     eyes.match_level = MatchLevel.LAYOUT
#     eyes.check_window(tag=tag)
#     close_eyes(eyes)


# without match level,for full page screenshot test
def validate_window(driver, eyes, tag):
    open_eyes(driver, eyes)
    eyes.force_full_page_screenshot = True
    eyes.check_window(tag=tag)
    close_eyes(eyes)


# without match level,for check-region test
def validate_element(driver, eyes, element, tag):
    open_eyes(driver, eyes)
    eyes.check_region(element, tag=tag)
    close_eyes(eyes)


# without match level,for check-region-in-frame test
def validate_frame(driver, eyes, frame_reference, region, tag):
    open_eyes(driver, eyes)
    eyes.check_region_in_frame(frame_reference, region, tag=tag)
    close_eyes(eyes)


def open_eyes(driver, eyes):
    eyes.open(driver, APP_NAME, test_name=get_test_name())


def get_test_name():
    import inspect
    return inspect.stack()[3].function


def close_eyes(eyes):
    eyes.close()

